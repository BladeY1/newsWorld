import asyncio
from enum import Enum
from typing import List, Optional
from genworlds.agents.abstracts.thought import AbstractThought
from pydantic import BaseModel, Field
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from genworlds.utils.logging_factory import LoggingFile
from newsagents.world.world_map import NewsCategory


class AgentBuilderThought(AbstractThought):
    def __init__(
        self,
        openai_api_key: str,
        model_name: str = "llama3",
    ):
        self.model_name = model_name
        self.llm = ChatOpenAI(
            model=self.model_name, openai_api_key=openai_api_key, temperature=0.1
        )
        self.logger = LoggingFile.get_logger(self.__class__.__name__)

    def run(self, category, country):
        class AgentBuilder(BaseModel):
            """A model for generating agent actions based on category and country."""
            action: str = Field(..., description="The action generated by the agent based on the category and country")

        prompt_template = """
        Based on the news category: {category} and the country: {country}, generate an appropriate action that an agent should take. 
        The action should be relevant and specific to the given category and country.
        """

        input_context = {
            "category": category,
            "country": country,
        }

        prompt = prompt_template.format(**input_context)

        output_parser = StrOutputParser()
        res = self.llm.run(prompt)
        print("res: ", res)

        response = AgentAction(action=res)
        self.logger.info(f"Generated Action: {response.action}")

        print(f"Generated Action: {response.action}")
        return response.action


